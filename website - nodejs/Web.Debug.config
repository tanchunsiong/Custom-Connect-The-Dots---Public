<?xml version="1.0" encoding="utf-8"?>
<!-- This file will modify Web.config to enable remote debugging when publishing your project in the Debug configuration.
     For more information on using web.config transformation visit http://go.microsoft.com/fwlink/?LinkId=125889 -->
<configuration xmlns:xdt="http://schemas.microsoft.com/XML-Document-Transform">

  <system.web xdt:Transform="Insert">
    <httpRuntime targetFramework="4.5" />
    <customErrors mode="Off"/>
  </system.web>

  <system.webServer>
    <webSocket enabled="false" />
    <!-- mimeMap enables IIS to serve particular file types as specified by fileExtension. -->
    <staticContent>
      <mimeMap fileExtension=".svg" mimeType="image/svg+xml" />
    </staticContent>
    
    <iisnode loggingEnabled="true"
             devErrorsEnabled="true"
             nodeProcessCommandLine="node.exe --debug"
             xdt:Transform="SetAttributes" />

    <handlers>
      <!-- The GUID in the following path is meant to protect the debugging endpoint against inadvertent access, and should be treated as a password. -->
      <add name="NtvsDebugProxy" path="ntvs-debug-proxy/867e22fe-28fd-49cf-a27d-d2c640397774" verb="*" resourceType="Unspecified"
           type="Microsoft.NodejsTools.Debugger.WebSocketProxy, Microsoft.NodejsTools.WebRole"
           xdt:Transform="Insert" />
    </handlers>

    <rewrite>
      <rules>
        <rule name="NtvsDebugProxy" enabled="true" stopProcessing="true" xdt:Transform="InsertAfter(/configuration/system.webServer/rewrite/rules/clear)">
          <match url="^ntvs-debug-proxy/.*"/>
        </rule>
    

          <!-- Don't interfere with requests for logs -->
          <rule name="LogFile" patternSyntax="ECMAScript" stopProcessing="true">
            <match url="^[a-zA-Z0-9_\-]+\.js\.logs\/\d+\.txt$"/>
          </rule>

          <!-- Don't interfere with requests for node-inspector debugging -->
          <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
            <match url="^server.js\/debug[\/]?" />
          </rule>

          <!-- First we consider whether the incoming URL matches a physical file in the /public folder -->
          <rule name="StaticContent">
            <action type="Rewrite" url="public{REQUEST_URI}"/>
          </rule>

          <!-- All other URLs are mapped to the Node.js application entry point -->
          <rule name="DynamicContent">
            <conditions>
              <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
            </conditions>
            <action type="Rewrite" url="server.js"/>
          </rule>

      </rules>
    </rewrite>

  </system.webServer>

</configuration>